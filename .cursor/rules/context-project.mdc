---
description: Ce projet est une plateforme web permettant aux freelances de r√©server des espaces de coworking selon leurs besoins. Con√ßu avec Laravel pour le backoffice et Vue.js pour le front, le syst√®me repose sur une API d√©velopp√©e avec API Platform, assurant une s√©paration claire entre les deux parties.  Gr√¢ce √† une interface intuitive, les utilisateurs peuvent consulter les espaces disponibles, s√©lectionner une plage horaire et effectuer une r√©servation en quelques clics. Le syst√®me g√®re plusieurs r√¥les :  Visiteurs : r√©servent des espaces. Loueurs : r√©servent et ajoutent des espaces au catalogue. Administrateurs : supervisent les r√©servations et assurent la s√©curit√© des donn√©es. L‚Äôauthentification est simplifi√©e via Laravel Breeze, et une gestion stricte des permissions garantit un acc√®s s√©curis√© aux diff√©rentes fonctionnalit√©s.  Cette solution vise √† optimiser l'occupation des espaces de coworking, offrant aux freelances une meilleure flexibilit√© pour travailler dans un environnement adapt√© √† leurs besoins. üöÄ
globs: 
alwaysApply: false
---

# Cursor Rules: Site de R√©servation d'Espaces de Coworking

## Contexte du Projet
Ce projet est une plateforme permettant aux freelances de r√©server des espaces de coworking pour une p√©riode d√©finie dans la journ√©e. Il comprend un **backoffice en Laravel** et un **front en Vue.js** reli√© via **API Platform**.

## Base de Donn√©es
Le mod√®le de donn√©es repose sur les tables suivantes :

### Tables principales
- **User** : G√®re les utilisateurs et leurs r√¥les.
- **Category** : {id, name, slug, created_at, updated_at} - Cat√©gories des produits.
- **Commande** : {id, prix, id_user, created_at, updated_at} - Suivi des commandes.
- **Produit** : {id, nom, description, prix, image, disponibilit√© (DateTime pour la date de d√©but et de fin), created_at, updated_at} - Espaces disponibles √† la r√©servation.

### Tables pivots
- **category_produit** : Relation entre cat√©gories et produits.
- **produit_commande** : Relation entre produits et commandes.

## Authentification
L'authentification est g√©r√©e via **Laravel Breeze**.

## R√¥les et Permissions
Trois r√¥les sont d√©finis :
- **ROLE_VISITEUR** : Peut r√©server un espace.
- **ROLE_LOUEUR** : Peut r√©server un espace et ajouter des produits au catalogue via le backoffice.
- **ROLE_ADMIN** : Acc√®s complet au CRUD et gestion de la s√©curit√©.

## API
Une **API** est d√©velopp√©e avec **API Platform** pour interagir avec le front en **Vue.js**, garantissant une s√©paration entre le backend et le frontend.

## Workflow de R√©servation
1. L'utilisateur (Visiteur ou Loueur) s√©lectionne un espace disponible.
2. Il choisit une p√©riode (DateTime pour d√©but et fin de la r√©servation).
3. **Une seule r√©servation est possible pour une m√™me p√©riode donn√©e.**
4. La r√©servation est enregistr√©e dans la table **Commande**.
5. Un administrateur peut superviser les r√©servations via le backoffice.

## Acc√®s API
L'API permet les actions suivantes selon les r√¥les :
- **Visiteur** : Acc√®s aux produits et cr√©ation de r√©servations.
- **Loueur** : Acc√®s aux produits, cr√©ation de r√©servations et ajout de nouveaux produits.
- **Admin** : Acc√®s complet (CRUD sur toutes les entit√©s).

## S√©curit√© et Gestion des Acc√®s
- Les r√¥les et permissions sont g√©r√©s via **Laravel Breeze**.
- L'API est s√©curis√©e pour √©viter tout acc√®s non autoris√© aux donn√©es sensibles.
- Seul un admin peut modifier ou supprimer des r√©servations existantes.
- **Les produits ajout√©s par un loueur sont imm√©diatement visibles sans validation.**
